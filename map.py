import pygame
from settings import *

# Defining a variable _ with value False
_ = False
# Defining a 2D list 'mapp' to represent the game map
# Each row of the list represents a row in the game map
# Each element in a row represents a cell in the game map
# 1 represents a wall, _ represents an empty space
# The map is 42 cells wide and 42 cells high
# The map design can be modified by changing the values in this list
mapp = [
    [_, _, _, _, _, _, _, _, 3, 3, 3, 3, 3, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, 3, 3, 3, 3, _, _, _, _, _, _, _, _, _, _],
    [_, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, _],
    [_, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, 1, 1, 1, _],
    [_, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _, _, _, _, _, 1, 1, 1, 1, 1, _, _, _, _, _, 1, 1, 1, 1, 1, 1, _],
    [_, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, _],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, _],
    [_, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _],
    [3, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, 1, _],
    [_, 1, _, _, _, _, 1, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, 1, 1, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, 1, _],
    [_, 1, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, 1, _],
    [_, 1, _, _, _, _, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _],
    [_, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, _],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 1, 1, 1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3],
    [3, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, _, _, _, _, _, 1, 1, 1, 1, 1, 1, 1, 1, 1, _],
    [_, _, _, _, _, _, _, _, 3, 3, 3, 3, 3, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, 3, 3, 3, 3, _, _, _, _, _, _, _, _, _, _]
]


# Defining a class 'Map' to handle the game map
class Map:
    def __init__(self, game):
        self.game = game
        # Storing the map
        self.mapp = mapp
        # Initializing an empty dictionary to store the map
        self.mmap = {}
        # Calling the get_map method to fill the mmap dictionary
        self.get_map()

    # The get_map method fills the mmap dictionary with the map data
    def get_map(self):
        # For each cell in the map
        for j, row in enumerate(self.mapp):
            for i, value in enumerate(row):
                # If the cell is not empty
                if value:
                    self.mmap[(i, j)] = value

    # The draw method draws the map on the screen
    def draw(self):
        # For each cell in the map
        for pos in self.mmap:
            # If the cell is within the player's view
            if (pos[0] - self.game.player.x) ** 2 + (pos[1] - self.game.player.y) ** 2 <= PLATER_VIEW ** 2:
                # Draw the cell on the screen
                if self.mmap[pos] == 1:
                    pygame.draw.rect(self.game.screen, 'white', (pos[0] * s_size, pos[1] * s_size, s_size, s_size), 2)
                if self.mmap[pos] == 3:
                    pygame.draw.rect(self.game.screen, 'purple', (pos[0] * s_size, pos[1] * s_size, s_size, s_size), 2)
